@typeparam TItem
@typeparam TId
@using System.Reflection


<InputSelect @attributes="@AdditionalAttributes" @bind-Value="@BoundValue">
    <option value="@InitialValue" selected disabled hidden>Choose a country</option>
    @foreach (TItem item in Items)
    {
        <option value="@_idProperty?.GetValue(item)">@_nameProperty?.GetValue(item)</option>
    }
</InputSelect>

@code {
    ///<summary>
    /// Creates a list of selectable objects from input values
    /// <InputListSelector id="selectCountry" @bind-Items="@Countries" @bind-SelectedId="@SelectedCountryId" TId="Guid" TItem="Country"/>
    /// </summary>
    /// 
    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = null!;

    [Parameter]
    public TId SelectedId { get; set; } = InitialValue;
    
    [Parameter]
    public string Value { get; set; } = "Id";
    
    [Parameter]
    public string Name { get; set; } = "Name";
    
    [Parameter]
    public EventCallback<TId> SelectedIdChanged { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (_idProperty is null)
        {
            var propertyInfos = typeof(TItem)
                .GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(x => x.CanRead).ToList();

            _idProperty = propertyInfos.FirstOrDefault(p => p.Name == Value)
                          ?? throw new ArgumentException($"Unable to access property info for {Value}", nameof(Value));
            _nameProperty = propertyInfos.FirstOrDefault(p => p.Name == Name)
                            ?? throw new ArgumentException($"Unable to access property info for {Name}", nameof(Name));
        }
    }
    
    private static readonly TId InitialValue;
    private PropertyInfo? _idProperty;
    private PropertyInfo? _nameProperty;

    private TId BoundValue
    {
        get => SelectedId;
        set => SelectedIdChanged.InvokeAsync(value);
    }
    
    [Parameter(CaptureUnmatchedValues=true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

}