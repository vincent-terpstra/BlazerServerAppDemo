@typeparam TItem
@typeparam TId
@using System.Reflection

<InputSelect class="form-control" @attributes="@UnMatchedAttributes" @bind-Value="@BoundValue">
    <option value="@InitialValue" selected disabled hidden>@DefaultText</option>
    @foreach (TItem item in Items ?? Enumerable.Empty<TItem>())
    {
        <option value="@GetId(item)">@_nameProperty?.GetValue(item)</option>
    }
</InputSelect>

@code {
    ///<summary>
    ///Allows selecting from a list of objects and setting the selected object
    /// <InputListSelectorV2 id="selectCountry" @bind-Items="@Countries" @bind-SelectedItem="@SelectedCountry" TId="Guid" TItem="Country"/>
    /// </summary>
    [Parameter]
    public IEnumerable<TItem>? Items { get; set; }
    
    [Parameter]
    public TItem? SelectedItem { get; set; }
    
    [Parameter]
    public EventCallback<TItem?> SelectedItemChanged { get; set; }
    
    [Parameter]
    public string DefaultText { get; set; } = "Choose";
    
    [Parameter]
    public string Value { get; set; } = "Id";
    
    [Parameter]
    public string Name { get; set; } = "Name";
    
    [Parameter(CaptureUnmatchedValues=true)]
    public Dictionary<string, object> UnMatchedAttributes { get; set; }
   
    protected override void OnParametersSet()
    {
        _idProperty ??= typeof(TItem).GetProperty(Value) 
            ?? throw new ArgumentException($"Unable to access property info for {Value}", nameof(Value));
        _nameProperty ??= typeof(TItem).GetProperty(Name) 
            ?? throw new ArgumentException($"Unable to access property info for {Name}", nameof(Name));
    }
    
    private static readonly TId InitialValue;
    
    private TId GetId(TItem item) => (TId) _idProperty?.GetValue(item)!;
    
    private TId? BoundValue
    {
        get => SelectedItem is null ? InitialValue :  GetId(SelectedItem);
        set => SelectedItemChanged.InvokeAsync(value is null ? default : Items.FirstOrDefault(i => value.Equals(GetId(i)))); 
    }
    
    private PropertyInfo? _idProperty;
    private PropertyInfo? _nameProperty;
}