@typeparam TItem
@typeparam TId


<InputSelect @attributes="@AdditionalAttributes" @bind-Value="@BoundValue">
    <option value="@InitialValue" selected disabled hidden>Choose a country</option>
    @foreach (TItem item in Items)
    {
        dynamic val = item!;
        <option value="@val.Id">@val.Name</option>
    }
</InputSelect>

@code {
    /// <summary>
    /// Creates a configurable list selector bound by Id
    /// <InputListDynamic id="selectCountry" @bind-Items="@Countries" @bind-SelectedId="@SelectedCountryId" TId="Guid" TItem="Country"/>    
    /// </summary>
    private static readonly TId InitialValue;

    [Parameter]
    public string Id { get; set; } = "Id";
    
    [Parameter]
    public string Name { get; set; } = "Name";
    
    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = null!;
    
    [Parameter]
    public TId SelectedId { get; set; } = InitialValue;

    [Parameter]
    public EventCallback<TId> SelectedIdChanged { get; set; }

    private TId BoundValue
    {
        get => SelectedId;
        set => SelectedIdChanged.InvokeAsync(value);
    }
    
    [Parameter(CaptureUnmatchedValues=true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

}