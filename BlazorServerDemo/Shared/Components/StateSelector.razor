@using BlazorServerDemo.Interfaces
@using BlazorServerDemo.Models
@using System.Transactions
@inject ICountryService _countryService

@if (Countries is null)
{
    <LoadingSpinner/>
}
else
{
    <label class="form-label" for="selectCountry">Select a Country</label>
    <InputListSelectorV2 id="selectCountry" Items="@Countries" DefaultText="Select a Country"
                         @bind-SelectedItem="@BoundCountry" TId="Guid" TItem="Country"/>

    <label class="form-label" for="selectCountry">Select a Province</label>
    <InputListSelectorV2 id="selectProvince" Items="@BoundCountry?.Provinces" DefaultText="@($"Select a {BoundCountry?.Region ?? "Country First"}")"
                         @bind-SelectedItem="@BoundProvince" TId="Guid" TItem="Province"/>

    <p>Selected Country is @BoundCountry?.Name</p>
    @if (BoundProvince is not null)
    {
        <p>Selected @BoundCountry?.Region is @BoundProvince?.Name</p>
    }
}


@code {

    [Parameter]
    public Country Country { get; set; }

    [Parameter]
    public Province Province { get; set; }

    [Parameter]
    public EventCallback<Country> CountryChanged { get; set; }

    [Parameter]
    public EventCallback<Province> ProvinceChanged { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Countries = _countryService.GetCountries();
    }

    private Country? _selectedCountry;

    private Country? BoundCountry
    {
        get => Country;
        set
        {
            CountryChanged.InvokeAsync(value);
            ProvinceChanged.InvokeAsync(null);
        }
    }

    private Province? BoundProvince
    {
        get => Province;
        set => ProvinceChanged.InvokeAsync(value);
    }
    
    IEnumerable<Country>? Countries { get; set; }
}