@page "/"

<PageTitle>Index</PageTitle>

<button @onclick="EnterEditMode">Edit Mode</button>
<h3>All Caps</h3>
<InputAllCaps @bind-Value="AllCaps"/>
<p>String is @AllCaps</p>


@code {
    private string AllCaps = String.Empty;
}

<div class="row">
    <div class="col-lg-6 col-md-12">
        <TaskList Name="Vincent"/>
    </div>
    <div class="col-lg-6 col-md-12">
        <TaskList Name="Tim"/>
    </div>
</div>
<CascadingValue Value="@this">
    <GenerateError></GenerateError>
</CascadingValue>
<br/>
<StateSelector/>

<p>@ErrorMessage</p>
<ErrorPopup @bind-ErrorMessage="ErrorMessage"></ErrorPopup>
<div class="col-lg-4">
    <GenerateError/>
    <button @onclick="ThrowError">Throw Error Outside of Error Bounds</button>
    <CustomErrorContent>
        <InitCounter/>
        <button @onclick="ThrowError">Throw Error</button>
        <Counter @bind-TotalCount="@parentCount"/>
        <GenerateError OnReturn="@ThrowError"/>
    </CustomErrorContent>

    @code
    {
        int parentCount = 42;


    }

    <ErrorBoundary>
        <ChildContent>
            <Counter @bind-TotalCount="@parentCount"/>
        </ChildContent>
        <ErrorContent>
            <p class="errorUi">Counter broke reload page to fix</p>
            <p>@context.Message</p>
        </ErrorContent>
    </ErrorBoundary>

</div>

@code {

    [Inject]
    public ILogger<Index> Logger { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        using var _ = Logger.BeginStopwatch();
        Logger.LogInformation("Before delay");
        await Task.Delay(50);
        Logger.LogInformation("After delay");
    }
}